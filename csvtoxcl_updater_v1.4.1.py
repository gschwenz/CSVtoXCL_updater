import pandas as pd
import os
from tkinter import Tk, filedialog, messagebox
from openpyxl import load_workbook
from datetime import datetime
import time

start_time = time.time()

try:
    root = Tk()
    root.withdraw()

    # --- SELECT CSV FILE ---
    csv_path = filedialog.askopenfilename(
        title="Select CSV File / W√§hle die CSV-Datei aus",
        filetypes=[("CSV files", "*.csv")]
    )
    if not csv_path:
        messagebox.showwarning("Cancelled / Abgebrochen", "‚ùå No CSV file selected.\n‚ùå Keine CSV-Datei ausgew√§hlt.")
        raise SystemExit()

    # --- SELECT EXCEL FILE ---
    excel_path = filedialog.askopenfilename(
        title="Select Excel File / W√§hle die Excel-Datei aus",
        filetypes=[("Excel files", "*.xlsx")]
    )
    if not excel_path:
        messagebox.showwarning("Cancelled / Abgebrochen", "‚ùå No Excel file selected.\n‚ùå Keine Excel-Datei ausgew√§hlt.")
        raise SystemExit()

    # --- LOAD CSV ---
    csv_df = pd.read_csv(csv_path)
    csv_headers = list(csv_df.columns)
    csv_data = csv_df.copy()

    # --- LOAD EXCEL & HEADER ---
    wb = load_workbook(excel_path)
    sheet = wb.active
    start_row = sheet.max_row + 1

    excel_headers = list(sheet.iter_rows(min_row=1, max_row=1, values_only=True))[0]


    # --- HEADER COMPARISON LOGIC ---
    header_log = ""
    def normalize_headers(header_row):
        return [str(h).strip().lower() for h in header_row]

    norm_csv_headers = normalize_headers(csv_headers)
    norm_excel_headers = normalize_headers(excel_headers)

    if norm_csv_headers == norm_excel_headers:
        #messagebox.showinfo(
        #    "Header Skipped / Kopfzeile √ºbersprungen",
        #    "üß† Header matched. The CSV header row will be skipped.\nüß† √úberschriften stimmen √ºberein. Kopfzeile wird nicht angeh√§ngt."
        #)
        header_log = "üß† Headers matched ‚Äì CSV header row skipped.\n"
        csv_data = csv_df.iloc[1:]
    else:
        mismatch_warning = (
            "‚ö†Ô∏è WARNING: Headers do not match!\n\n"
            "CSV Header:\n" + ", ".join(csv_headers) + "\n\n"
            "Excel Header:\n" + ", ".join(str(h) for h in excel_headers) + "\n\n"
            "‚ö†Ô∏è MISMATCH ‚Äì Please verify before proceeding.\n"
            "‚ö†Ô∏è UNTERSCHIEDLICHE √úBERSCHRIFTEN ‚Äì Bitte √ºberpr√ºfen."
        )
        messagebox.showwarning("Header Mismatch / √úberschriften stimmen nicht √ºberein", mismatch_warning)
        header_log = "‚ö†Ô∏è Header mismatch ‚Äì data appended anyway. Please review structure.\n"


    added_rows = len(csv_data)

    # --- WRITE TO EXCEL ---
    for row_idx, row in csv_data.iterrows():
        for col_idx, value in enumerate(row, start=1):
            sheet.cell(row=start_row + row_idx, column=col_idx, value=value)

    wb.save(excel_path)
    wb.close()

    # --- LOGGING ---
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    elapsed = time.time() - start_time
    log_message = (
        f"{timestamp} | ‚úÖ {added_rows} rows from '{os.path.basename(csv_path)}' "
        f"added to '{os.path.basename(excel_path)}' (starting at row {start_row}). "
        f"‚è±Ô∏è Duration: {elapsed:.2f} seconds\n"
        f"{timestamp} | ‚úÖ {added_rows} Zeilen von '{os.path.basename(csv_path)}' "
        f"zu '{os.path.basename(excel_path)}' (ab Zeile {start_row}) hinzugef√ºgt. "
        f"‚è±Ô∏è Dauer: {elapsed:.2f} Sekunden\n"
        f"{header_log}\n"
    )

    log_path = os.path.join(os.path.dirname(__file__), "import_log.txt")
    with open(log_path, "a", encoding="utf-8") as log_file:
        log_file.write(log_message)

    # --- FINAL POPUP ---
    messagebox.showinfo(
        "Import Complete / Import abgeschlossen",
        f"‚úÖ {added_rows} rows added.\n‚úÖ {added_rows} Zeilen hinzugef√ºgt.\n\n"
        f"üìÑ File: {os.path.basename(csv_path)}\nüìÑ Datei: {os.path.basename(csv_path)}\n"
        f"üìä Target: {os.path.basename(excel_path)}\nüìä Ziel: {os.path.basename(excel_path)}\n"
        f"üìà Sheet starts at row {start_row}\nüìà Arbeitsblatt beginnt bei Zeile {start_row}\n"
        f"‚è±Ô∏è Duration: {elapsed:.2f} seconds\n‚è±Ô∏è Dauer: {elapsed:.2f} Sekunden\n\n"
        f"{header_log.strip()}\n"
        f"(Log entry created / Protokolleintrag erstellt)"
    )

except Exception as e:
    import traceback
    print("\n‚ùå Error occurred / Fehler ist aufgetreten:")
    traceback.print_exc()

    input("üîö Press ENTER to exit / Dr√ºcke ENTER zum Beenden...")
